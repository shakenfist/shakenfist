- hosts: localhost
  gather_facts: no
  connection: ssh
  vars:
    identifier: unknown
    source_path: "/home/jenkins/src/shakenfist/"
    base_image: "ubuntu:20.04"
    base_image_user: "ubuntu"
    keyfile_private: "/home/jenkins/id_ci"
    keyfile_public: "/home/jenkins/id_ci.pub"

  tasks:
    - name: Create the namespace
      shell: sf-client namespace create "{{identifier}}"

    - name: Create a network
      sf_network:
        netblock: "10.0.0.0/24"
        name: "rebuild"
        namespace: "{{identifier}}"
      register: cinetwork

    - name: Log network details
      debug:
        msg: "Network is {{cinetwork['meta']['uuid']}}"

    - name: Create an instance
      sf_instance:
        name: "{{rebuild}}"
        cpu: 4
        ram: 4096
        disks:
          - "30@{{base_image}}"
        networkspecs:
          - network_uuid="{{cinetwork['meta']['uuid']}}",float=True
        ssh_key: "{{ lookup('file', keyfile_public) }}"
        namespace: "{{identifier}}"
        state: present
      register: imagerebuild

    - name: Add to ansible
      add_host:
        hostname: imagerebuild
        ansible_ssh_host: "{{imagerebuild['meta']['network_interfaces'][0]['floating']}}"
        ansible_ssh_extra_args: "-o StrictHostKeyChecking=no -o GlobalKnownHostsFile=/dev/null -o UserKnownHostsFile=/dev/null"
        ansible_ssh_user: "{{base_image_user}}"
        ansible_ssh_private_key_file: "{{keyfile_private}}"
        sf_instance_uuid: "{{imagerebuild['meta']['uuid']}}"
        sf_network_uuid: "{{imagerebuild['meta']['network_interfaces'][0]['network_uuid']}}"
        groups: sfall

    - name: Log instance
      debug:
        msg: "{{imagerebuild}}"

    - name: Wait for instance to present an "OpenSSH" prompt
      wait_for:
        port: 22
        host: "{{hostvars['imagerebuild']['ansible_ssh_host']}}"
        search_regex: OpenSSH
        delay: 10

- hosts: sfall
  gather_facts: yes
  become: true
  vars:
    source_path: "/home/jenkins/src/shakenfist/"

  tasks:
    - name: Use CI package cache to speed things up
      copy:
        content: |
          Acquire::http::Proxy "http://192.168.1.50:8000";
        dest: /etc/apt/apt.conf.d/00proxy
        owner: root
        group: root
        mode: u=r,g=r,o=r

    # Setup ansible PPA so we get never versions for Ubuntu to work around
    # https://github.com/ansible/ansible/issues/69401
    - name: Setup Ansible PPA
      copy:
        content: |
          deb http://ppa.launchpad.net/ansible/ansible/ubuntu focal main
        dest: /etc/apt/sources.list.d/ansible.list
        owner: root
        group: root
        mode: u=r,g=r,o=r
      when: ansible_distribution == 'Ubuntu'

    # As recommended on the ansible apt module documentation...
    - name: Install packages only when the apt process is not locked
      apt:
        name: bash
        state: present
      register: apt_action
      retries: 100
      until: apt_action is success or ('Failed to lock apt for exclusive operation' not in apt_action.msg and '/var/lib/dpkg/lock' not in apt_action.msg)

    # Add GPG key for Ansible PPA
    - name: Force an apt-get update with Ansible PPA
      shell: |
        apt-get update
        apt-get install gnupg
        apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 93C4A3FD7BB9C367
      when: ansible_distribution == 'Ubuntu'

    # I am unsure why I need to manually force this, but I do need to.
    - name: Force an apt-get update
      shell: apt-get update

    - name: apt-get dist-upgrade
      apt:
        update_cache: yes
        upgrade: dist
        autoremove: yes

    # TODO(mikal): dial this back once we have things working.
    - name: Install dependencies
      apt:
        name:
          - ansible
          - apache2
          - git
          - prometheus
          - pwgen
          - python3
          - python3-dev
          - python3-grpcio
          - python3-pip
          - python3-venv
          - python3-wheel
        state: latest

    - name: Install non-hypervisor dependencies
      apt:
        name:
          - arping
          - bridge-utils
          - cpu-checker
          - dnsmasq
          - dnsutils
          - hddtemp
          - libmagic-dev
          - libssl-dev
          - libssl-dev
          - libvirt-daemon-system
          - libvirt-dev
          - lm-sensors
          - net-tools
          - ovmf
          - prometheus-node-exporter
          - python3-libvirt
          - qemu-kvm
          - unzip
        state: latest

    - name: Install tox and dependencies via apt on Ubuntu
      apt:
        name:
          - tox
      when: ansible_distribution == 'Ubuntu'

    # This is driven by issues with the version of tox packaged on Debian 10
    - name: Install tox and dependencies via pip on Debian
      shell: pip3 install -U tox filelock virtualenv
      when: ansible_distribution == 'Debian'

    - name: Install Grafana prerequisites
      apt:
        name: ["apt-transport-https", "software-properties-common"]
        update_cache: yes
        state: latest

    - name: Add Grafana GPG key
      apt_key: url=https://packages.grafana.com/gpg.key

    - name: Add Grafana APT repository
      apt_repository:
        repo: deb [arch=amd64] http://packages.grafana.com/oss/deb stable main

    - name: Install Grafana
      apt:
        name: ["grafana"]
        update_cache: yes

    - name: Copy ansible config
      copy:
        src: /etc/ansible/ansible.cfg
        dest: /etc/ansible/ansible.cfg
        owner: root
        group: root
        mode: u=r,g=r,o=r

    - name: Copy SF installer ansible requirements
      copy:
        src: ../../requirements.yml
        dest: /tmp/ansible-requirements.yml
        owner: root
        group: root
        mode: u=r,g=r,o=r

    - name: Install ansible galaxy roles
      shell: ansible-galaxy install -r /tmp/ansible-requirements.yml

    - name: Copy SF requirements.txt
      copy:
        src: ../../../requirements.txt
        dest: /tmp/sf-requirements.txt
        owner: root
        group: root
        mode: u=r,g=r,o=r

    - name: Copy SF client requirements.txt
      copy:
        src: ../../../../client-python/requirements.txt
        dest: /tmp/client-requirements.txt
        owner: root
        group: root
        mode: u=r,g=r,o=r

    - name: Make venv and install server wheel
      shell: |
        python3 -m venv --system-site-packages /srv/shakenfist/venv
        /srv/shakenfist/venv/bin/pip install -U pip
        /srv/shakenfist/venv/bin/pip install -U -r /tmp/sf-requirements.txt
        /srv/shakenfist/venv/bin/pip install -U -r /tmp/client-requirements.txt

    - name: Make a directory for cached images
      file:
        path: /srv/ci
        state: directory
        mode: "0755"

    - name: Cache most images used during CI to reduce network traffic
      get_url:
        url: "{{item.url}}"
        dest: "/srv/ci/{{item.name}}"
        mode: u+r
      loop:
        - {
            url: "https://cloud-images.ubuntu.com/releases/bionic/release/ubuntu-18.04-server-cloudimg-amd64.img",
            name: "ubuntu:18.04",
          }
        - {
            url: "https://cloud-images.ubuntu.com/releases/focal/release/ubuntu-20.04-server-cloudimg-amd64.img",
            name: "ubuntu:20.04",
          }
        - {
            url: "https://download.cirros-cloud.net/0.5.2/cirros-0.5.2-x86_64-disk.img",
            name: "cirros",
          }

    - name: Try and avoid the disk being corrupt when snapshot
      shell: |
        sleep 5
        sync
        sleep 1
        sync
        sleep 1
        sync
        sleep 1

- hosts: localhost
  gather_facts: no
  connection: ssh
  vars:
    identifier: cron
    base_image_user: "ubuntu"
    keyfile_private: "/home/jenkins/id_ci"
    keyfile_public: "/home/jenkins/id_ci.pub"
    label: "sfci-image"

  tasks:
    - name: Snapshot the instance
      sf_snapshot:
        instance_uuid: "{{hostvars['imagerebuild']['sf_instance_uuid']}}"
        state: present
      register: cisnapshot

    - name: Log snapshot details
      debug:
        msg: "{{cisnapshot}}"

    - name: Record the snapshot uuid
      set_fact:
        snapshot_uuid: "{{cisnapshot['meta']['vda']['blob_uuid']}}"

    - name: Log snapshot uuid
      debug:
        msg: "{{hostvars['localhost']['snapshot_uuid']}}"

    - name: Test the snapshot
      sf_instance:
        name: "test"
        cpu: 4
        ram: 4096
        disks:
          - "30@sf://blob/{{hostvars['localhost']['snapshot_uuid']}}"
        networkspecs:
          - network_uuid="{{cinetwork['meta']['uuid']}}",float=True
        ssh_key: "{{ lookup('file', keyfile_public) }}"
        namespace: "{{identifier}}"
        state: present
      register: imagetest

    - name: Add to ansible
      add_host:
        hostname: imagetest
        ansible_ssh_host: "{{imagetest['meta']['network_interfaces'][0]['floating']}}"
        ansible_ssh_extra_args: "-o StrictHostKeyChecking=no -o GlobalKnownHostsFile=/dev/null -o UserKnownHostsFile=/dev/null"
        ansible_ssh_user: "{{base_image_user}}"
        ansible_ssh_private_key_file: "{{keyfile_private}}"
        sf_instance_uuid: "{{imagetest['meta']['uuid']}}"
        sf_network_uuid: "{{imagetest['meta']['network_interfaces'][0]['network_uuid']}}"
        groups: sfall

    - name: Log instance
      debug:
        msg: "{{imagetest}}"

    - name: Wait for test instance to present an "OpenSSH" prompt
      wait_for:
        port: 22
        host: "{{hostvars['imagetest']['ansible_ssh_host']}}"
        search_regex: OpenSSH
        delay: 10

- hosts: imagetest
  gather_facts: no
  become: true

  tasks:
    - name: Do a dist-upgrade to ensure that we can sudo and manage packages
      apt:
        update_cache: yes
        upgrade: dist
        autoremove: yes

- hosts: localhost
  gather_facts: no
  connection: ssh

  tasks:
    # NOTE(mikal): this is obviously a placeholder for now, but it explains
    # what I need to add to the client to make this work.
    - name: Add the snapshot to the label
      shell: |
        sf-client label update "{{label}}" "{{hostvars['localhost']['snapshot_uuid']}}"

    - name: Delete the snapshot (its a label now if it passed)
      sf_snapshot:
        uuid: "{{cisnapshot['meta']['vda']['artifact_uuid']}}"
        state: absent

    - name: Delete test instance
      sf_instance:
        uuid: "{{hostvars['imagetest']['sf_instance_uuid']}}"
        namespace: ci
        state: absent

    - name: Delete build instance
      sf_instance:
        uuid: "{{hostvars['imagerebuild']['sf_instance_uuid']}}"
        namespace: ci
        state: absent

    - name: Delete network
      sf_network:
        uuid: "{{hostvars['imagerebuild']['sf_network_uuid']}}"
        namespace: ci
        state: absent
