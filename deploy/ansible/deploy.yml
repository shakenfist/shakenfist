# yaml-language-server: $schema=https://json.schemastore.org/ansible-playbook.json

# Install Shaken Fist on a series of Ubuntu or Debian machines. Some parts of this
# ansible playbook contain tags, but not all. Currently available tags are:
#
#   bootstrap: bootstrap the installer, you must always run this tag.
#   etcd: tasks associated with setup or upgrade of etcd itself.
#   pki: tasks associated with setup of certifying authorities or PKI certificate
#     (for example those for the SPICE console).

- hosts: localhost
  gather_facts: yes
  connection: ssh
  become: yes
  tags: bootstrap
  vars:
    ram_system_reservation: 2.0
    dns_server: 8.8.8.8
    http_proxy:

  tasks:
    - name: Set global configurations as facts
      set_fact:
        "ram_system_reservation": "{{ram_system_reservation}}"
        "dns_server": "{{dns_server}}"
        "http_proxy": "{{http_proxy}}"
      delegate_to: localhost
      delegate_facts: true

    - include_tasks: tasks/distro-check.yml

    - name: Log topology
      debug:
        msg: "{{topology}}"

    - name: Add nodes from topology
      # This include is to work around the lack of blocks in loops
      include_tasks: includes/topology_add_node.yml
      loop: "{{topology}}"

    - name: Set configuration file location
      set_fact:
        "template_path": "/srv/shakenfist/venv/share/shakenfist/templates"
        "utility_path": "/srv/shakenfist/venv/bin"
      delegate_to: localhost
      delegate_facts: true

    - name: Check if we have a venv on localhost already
      stat:
        path: /srv/shakenfist/venv/share/shakenfist/templates
      register: localhost_venv

- hosts: allsf
  any_errors_fatal: true
  become: yes
  become_method: sudo
  tags: bootstrap
  gather_facts: no
  connection: ssh
  vars:
    server_package: "shakenfist"
    client_package: "shakenfist-client"
    pip_extra: ""

  tasks:
    - name: Setup /etc/hosts
      copy:
        content: |
          127.0.0.1 localhost

          # The following lines are desirable for IPv6 capable hosts
          ::1 ip6-localhost ip6-loopback
          fe00::0 ip6-localnet
          ff00::0 ip6-mcastprefix
          ff02::1 ip6-allnodes
          ff02::2 ip6-allrouters
          ff02::3 ip6-allhosts

          {% for svr in groups.allsf %}
          {{hostvars[svr]['node_mesh_ip']}}  {{svr}}
          {% endfor %}
          {{hostvars[groups['primary_node'][0]]['node_mesh_ip']}}  sf-primary
        dest: /etc/hosts
        owner: root
        group: root
        mode: u=r,g=r,o=r

    - name: Log network and primary node
      debug:
        msg:
          - "Primary node IP is {{hostvars[groups['primary_node'][0]]['node_mesh_ip']}}"
          - "Network node is {{hostvars[groups['network_node'][0]]['node_name']}} with mesh IP {{hostvars[groups['network_node'][0]]['node_mesh_ip']}}"
      run_once: true

    # As recommended on the ansible apt module documentation...
    - name: Upgrade packages
      apt:
        upgrade: dist
        update_cache: yes
        autoremove: yes
      register: apt_action
      retries: 100
      until: apt_action is success or ('Failed to lock apt for exclusive operation' not in apt_action.msg and '/var/lib/dpkg/lock' not in apt_action.msg)

    - name: Install qemu
      block:
        - name: Attempt to install qemu-kvm
          apt:
            name: qemu-kvm
      rescue:
        - name: Attempt to install qemu-system-x86 instead
          apt:
            name: qemu-system-x86

    # We install libvirt, even on non-hypervisors, because we use it to track
    # the CPU topology and load of the node.
    - name: Install non-hypervisor dependencies
      apt:
        name:
          - apparmor
          - arping
          - bridge-utils
          - build-essential
          - cpu-checker
          - dnsmasq
          - dnsmasq-utils
          - dnsutils
          - git
          - libmagic-dev
          - libssl-dev
          - libssl-dev
          - libvirt-daemon-system
          - libvirt-dev
          - lm-sensors
          - net-tools
          - ovmf
          - prometheus-node-exporter
          - python3-cffi
          - python3-dev
          - python3-libvirt
          - python3-pip
          - python3-venv
          - python3-wheel
          - pwgen
          - qemu-utils
          - rsyslog
          - tox
          - unzip
        state: latest

    - name: Create python venv and install Shaken Fist packages
      shell: |
        mkdir -p /srv/shakenfist/venv
        python3 -mvenv --system-site-packages /srv/shakenfist/venv
        /srv/shakenfist/venv/bin/pip install -U pip
        /srv/shakenfist/venv/bin/pip install {{pip_extra}} {{agent_package}} {{server_package}} {{client_package}}

# Setup the TLS CA on the primary
- hosts: localhost
  gather_facts: yes
  connection: ssh
  become: yes
  tags: pki

  tasks:
    - name: Install CA setup tools
      apt:
        name:
          - gnutls-bin
        state: latest

    - name: Make /etc/pki/CA
      file:
        path: /etc/pki/CA
        state: directory
        mode: "0755"

    - name: Make /etc/pki/qemu
      file:
        path: /etc/pki/qemu
        state: directory
        mode: "0755"

    - name: Check if the CA is already setup
      stat:
        path: /etc/pki/CA/ca-cert.pem
      register: ca_cert

    - name: Setup CA template
      copy:
        content: |
          cn = Shaken Fist CA for {{deploy_name}}
          ca
          cert_signing_key
          expiration_days = 3650
        dest: /etc/pki/CA/certificate_authority_template.info
        owner: root
        mode: u=r
      when: not ca_cert.stat.exists

    - name: Create CA authority key
      shell:
        umask 277 && certtool --generate-privkey > /etc/pki/CA/certificate_authority_key.pem
      when: not ca_cert.stat.exists

    - name: Set permissions on the CA authority key
      file:
        path: /etc/pki/CA/certificate_authority_key.pem
        mode: '0400'

    - name: Create CA certificate
      shell:
        certtool --generate-self-signed \
            --template /etc/pki/CA/certificate_authority_template.info \
            --load-privkey /etc/pki/CA/certificate_authority_key.pem \
            --outfile /etc/pki/CA/ca-cert.pem
      when: not ca_cert.stat.exists

    - name: Set permissions on the CA certificate
      file:
        path: /etc/pki/CA/ca-cert.pem
        mode: '0444'

# Generate certificates for all hosts
- hosts: allsf
  any_errors_fatal: true
  become: yes
  become_method: sudo
  tags: pki
  gather_facts: no
  connection: ssh

  tasks:
    - name: Write host certificate template
      copy:
        content: |
          organization = Shaken Fist CA for {{deploy_name}}
          cn = {{inventory_hostname}}
          tls_www_server
          encryption_key
          signing_key
        dest: /etc/pki/CA/{{inventory_hostname}}_server_template.info
        owner: root
        mode: u=r
      delegate_to: localhost
      delegate_facts: true

    - name: Check if the host certificate is already created
      stat:
        path: /etc/pki/CA/{{inventory_hostname}}_server_cert.pem
      register: host_cert

    - name: Create host key
      shell:
        umask 277 && certtool --generate-privkey > /etc/pki/CA/{{inventory_hostname}}_server_key.pem
      delegate_to: localhost
      delegate_facts: true
      when: not host_cert.stat.exists

    - name: Create host certificate
      shell:
        certtool --generate-certificate \
          --template /etc/pki/CA/{{inventory_hostname}}_server_template.info \
          --load-privkey /etc/pki/CA/{{inventory_hostname}}_server_key.pem \
          --load-ca-certificate /etc/pki/CA/ca-cert.pem \
          --load-ca-privkey /etc/pki/CA/certificate_authority_key.pem \
          --outfile /etc/pki/CA/{{inventory_hostname}}_server_cert.pem
      delegate_to: localhost
      delegate_facts: true
      when: not host_cert.stat.exists

# Distribute the CA certificate to all hosts
- hosts: allsf
  any_errors_fatal: true
  become: yes
  become_method: sudo
  tags: pki
  gather_facts: no
  connection: ssh

  tasks:
    - name: Make /etc/pki/CA
      file:
        path: /etc/pki/CA
        state: directory
        mode: "0755"

    - name: Make /etc/pki/libvirt-spice
      file:
        path: /etc/pki/libvirt-spice
        state: directory
        mode: "0755"

    - name: Check if the CA is already setup
      stat:
        path: /etc/pki/libvirt-spice/ca-cert.pem
      register: ca_cert

    - name: Copy CA certificate to host
      copy:
        src: /etc/pki/CA/ca-cert.pem
        dest: /etc/pki/libvirt-spice/ca-cert.pem
        owner: root
        group: root
        mode: '0444'
      when: not ca_cert.stat.exists

    - name: Check if the host certificate is already setup
      stat:
        path: /etc/pki/libvirt-spice/server-cert.pem
      register: host_cert

    - name: Copy host key to host
      copy:
        src: /etc/pki/CA/{{inventory_hostname}}_server_key.pem
        dest: /etc/pki/libvirt-spice/server-key.pem
        owner: root
        group: root
        mode: '0444'
      when: not host_cert.stat.exists

    - name: Copy host certificate to host
      copy:
        src: /etc/pki/CA/{{inventory_hostname}}_server_cert.pem
        dest: /etc/pki/libvirt-spice/server-cert.pem
        owner: root
        group: root
        mode: '0444'
      when: not host_cert.stat.exists

- hosts: hypervisors, network_node, eventlog_node
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh

  tasks:
    - name: Determine the mesh network interface MTU
      shell: ip link show
      register: ip_links

    - name: Log network interfaces
      debug:
        msg: "{{ip_links.stdout}}"

    - name: Determine the mesh network interface MTU
      shell: ip link show {{node_mesh_nic}} | grep mtu | sed -e 's/.*mtu //' -e 's/ .*//'
      register: node_mtu_complex

    - name: Extract default interface MTU
      set_fact:
        node_mtu: "{{node_mtu_complex.stdout}}"

    - name: Log node MTU
      debug:
        msg: "Node MTU is {{node_mtu}}"

    - name: Abort if default interface MTU is too low
      fail:
        msg: "Node MTU is too low."
      when: ignore_mtu != "1" and node_mtu|int < 2000

    - name: Make /srv/shakenfist/
      file:
        path: /srv/shakenfist
        state: directory
        mode: "0755"

    - name: Install gunicorn
      shell: /srv/shakenfist/venv/bin/pip install -U gunicorn

    - name: Configure IPv6 to be disabled on boot
      copy:
        content: |
          net.ipv6.conf.all.disable_ipv6 = 1
          net.ipv6.conf.default.disable_ipv6 = 1
        dest: /etc/sysctl.d/10-sf-ipv6.conf
        owner: root
        mode: u=r,g=r,o=r

    - name: Configure IPv6 to be disabled now
      shell: |
        sysctl -w net.ipv6.conf.all.disable_ipv6=1
        sysctl -w net.ipv6.conf.default.disable_ipv6=1
      ignore_errors: True

    - name: Configure ipforwarding to be enabled on boot
      copy:
        content: |
          net.ipv4.ip_forward = 1
        dest: /etc/sysctl.d/10-sf-ipforwarding.conf
        owner: root
        mode: u=r,g=r,o=r

    - name: Configure ipforwarding to be enabled now
      shell: |
        sysctl -w net.ipv4.ip_forward=1
      ignore_errors: True

    - name: Disable system suspend
      copy:
        content: |
          [Sleep]
          AllowSuspend=no
          AllowHibernation=no
          AllowSuspendThenHibernate=no
          AllowHybridSleep=no
        dest: /etc/systemd/sleep.conf
        owner: root
        mode: u=r,g=r,o=r

    - name: Restart systemd-logind to disable system suspend
      service:
        name: systemd-logind
        state: restarted

    - name: Configure journald to not consume heaps of disks
      copy:
        content: |
          [Journal]
          #Storage=auto
          #Compress=yes
          #Seal=yes
          #SplitMode=uid
          #SyncIntervalSec=5m
          #RateLimitIntervalSec=30s
          #RateLimitBurst=10000
          #SystemMaxUse=
          #SystemKeepFree=
          SystemMaxFileSize=1000M
          #SystemMaxFiles=100
          #RuntimeMaxUse=
          #RuntimeKeepFree=
          #RuntimeMaxFileSize=
          #RuntimeMaxFiles=100
          #MaxRetentionSec=
          #MaxFileSec=1month
          #ForwardToSyslog=yes
          #ForwardToKMsg=no
          #ForwardToConsole=no
          #ForwardToWall=yes
          #TTYPath=/dev/console
          #MaxLevelStore=debug
          #MaxLevelSyslog=debug
          #MaxLevelKMsg=notice
          #MaxLevelConsole=info
          #MaxLevelWall=emerg
          #LineMax=48K
          #ReadKMsg=yes
          #Audit=no
        dest: /etc/systemd/journald.conf
        owner: root
        mode: u=r,g=r,o=r

    - name: Restart journald
      service:
        name: systemd-journald
        state: restarted

- hosts: hypervisors
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh

  tasks:
    - name: Disable dnsmasq
      service:
        name: dnsmasq
        enabled: no
        state: stopped

    - name: Check that we can run KVM
      shell: kvm-ok

    # Determine what architecture we're on. Derived from
    # https://github.com/redhat-openstack/ansible-role-tripleo-parts
    - name: Do we have Intel CPUs?
      command: grep -q Intel /proc/cpuinfo
      ignore_errors: true
      register: is_intel

    - name: Do we have AMD CPUs?
      command: grep -q AMD /proc/cpuinfo
      ignore_errors: true
      register: is_amd

    - name: Enable nested virtualization now (AMD)
      shell: |
        modprobe -r kvm_intel || true
        modprobe kvm_amd nested=1
      when: is_amd.rc == 0

    - name: Enable nested virtualization now (Intel)
      shell: |
        modprobe -r kvm_amd
        modprobe kvm_intel nested=1
      when: is_intel.rc == 0

    - name: Enable nested virtualization on boot (AMD)
      copy:
        content: |
          options kvm_amd nested=1
        dest: /etc/modprobe.d/sf-kvm.conf
        owner: root
        mode: u=r,g=r,o=r
      when: is_amd.rc == 0

    - name: Enable nested virtualization on boot (Intel)
      copy:
        content: |
          options kvm_intel nested=1
        dest: /etc/modprobe.d/sf-kvm.conf
        owner: root
        mode: u=r,g=r,o=r
      when: is_intel.rc == 0

    - name: Configure KSM to run on boot
      copy:
        content: |
          w /sys/kernel/mm/ksm/run - - - - 1
          w /sys/kernel/mm/ksm/pages_to_scan - - - - 1000000
          w /sys/kernel/mm/ksm/merge_across_nodes - - - - 0
        dest: /etc/tmpfiles.d/sf-ksm.conf
        owner: root
        mode: u=r,g=r,o=r
      when: ksm_enabled == "1"

    # merge_across_nodes requires a reboot, so is skipped below
    - name: Configure KSM to run now
      shell: |
        echo "1" > /sys/kernel/mm/ksm/run
        echo "100000" > /sys/kernel/mm/ksm/pages_to_scan
      ignore_errors: True
      when: ksm_enabled == "1"

    - name: Configure KSM to not run on boot
      copy:
        content: |
          w /sys/kernel/mm/ksm/run - - - - 0
          w /sys/kernel/mm/ksm/pages_to_scan - - - - 0
          w /sys/kernel/mm/ksm/merge_across_nodes - - - - 0
        dest: /etc/tmpfiles.d/sf-ksm.conf
        owner: root
        mode: u=r,g=r,o=r
      when: ksm_enabled != "1"

    # merge_across_nodes requires a reboot, so is skipped below
    - name: Configure KSM to not run now
      shell: |
        echo "0" > /sys/kernel/mm/ksm/run
        echo "0" > /sys/kernel/mm/ksm/pages_to_scan
      ignore_errors: True
      when: ksm_enabled != "1"

    - name: Enable SPICE TLS
      lineinfile:
        path: /etc/libvirt/qemu.conf
        regexp: "#spice_tls = "
        line: 'spice_tls = 1'

    - name: Configure SPICE TLS PKI directory
      lineinfile:
        path: /etc/libvirt/qemu.conf
        regexp: "#spice_tls_x509_cert_dir = "
        line: 'spice_tls_x509_cert_dir = "/etc/pki/libvirt-spice"'

    # Ensure libvirt has BPF and perfmon capabilities (see the Debian bug
    # https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=979964 for details).
    - name: Let libvirt use BPF
      lineinfile:
        path: /etc/apparmor.d/local/usr.sbin.libvirtd
        regexp: "  capability bpf,"
        line: '  capability bpf,'

    - name: Let libvirt use perfmon
      lineinfile:
        path: /etc/apparmor.d/local/usr.sbin.libvirtd
        regexp: "  capability perfmon,"
        line: '  capability perfmon,'

    - name: Let libvirt use sys_rawio
      lineinfile:
        path: /etc/apparmor.d/local/usr.sbin.libvirtd
        regexp: "  capability sys_rawio,"
        line: '  capability sys_rawio,'

    - name: Check that the /etc/apparmor.d/local/abstractions/libvirt-qemu exists
      stat:
        path: /etc/apparmor.d/local/abstractions/libvirt-qemu
      register: stat_result

    # NOTE(mikal): this wont work if the user has configured a different
    # path for the instance path. We should fix that.
    - name: Add an apparmor rule for NVMe disks (modern Debian)
      lineinfile:
        path: /etc/apparmor.d/local/abstractions/libvirt-qemu
        regexp: "/srv/shakenfist/instances.*nvme.*"
        line: "/srv/shakenfist/instances/*/nvme[0-9] rwk,"
      when: stat_result.stat.exists

    # NOTE(mikal): and fix it here too.
    - name: Add an apparmor rule for NVMe disks (older Debian)
      lineinfile:
        path: /etc/apparmor.d/abstractions/libvirt-qemu
        regexp: "/srv/shakenfist/instances.*nvme.*"
        line: "/srv/shakenfist/instances/*/nvme[0-9] rwk,"
      when: not stat_result.stat.exists

    # Let libvirt read the SSL configuration for its SPICE connections (see the
    # Debian bug https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1030684 for
    # details).
    - name: Let libvirt read our openssl config
      lineinfile:
        path: /etc/apparmor.d/local/abstractions/libvirt-qemu
        regexp: "/etc/ssl/openssl.cnf r,"
        line: '/etc/ssl/openssl.cnf r,'
      when: stat_result.stat.exists

    - name: Let libvirt read our openssl config
      lineinfile:
        path: /etc/apparmor.d/abstractions/libvirt-qemu
        regexp: "/etc/ssl/openssl.cnf r,"
        line: '/etc/ssl/openssl.cnf r,'
      when: not stat_result.stat.exists

    # For instances which are started with no network interface, but then hotplug
    # one later, we need to ensure that we always have access to /dev/vhost-net.
    # See https://bugs.launchpad.net/ubuntu/+source/libvirt/+bug/1815910 for
    # details.
    - name: Add an apparmor rule to always allow vhost-net access
      lineinfile:
        path: /etc/apparmor.d/local/abstractions/libvirt-qemu
        regexp: "/dev/vhost-net rw,"
        line: '/dev/vhost-net rw,'
      when: stat_result.stat.exists

    - name: Add an apparmor rule to always allow vhost-net access
      lineinfile:
        path: /etc/apparmor.d/abstractions/libvirt-qemu
        regexp: "/dev/vhost-net rw,"
        line: '/dev/vhost-net rw,'
      when: not stat_result.stat.exists

    - name: Restart apparmor
      service:
        name: apparmor
        enabled: yes
        state: restarted

    - name: Restart libvirt
      service:
        name: libvirtd
        state: restarted

- hosts: primary_node
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh

  tasks:
    - name: Write an ansible inventory file to handle ad hoc commands
      template:
        src: files/inventory.yaml
        dest: /etc/sf/inventory.yaml
        owner: root
        group: sudo
        mode: u=r,g=r,o=

    - name: Find hypervisor with lowest MTU
      set_fact:
        lowest_mtu_hypervisor: "{{ groups['hypervisors'] | sort('node_mtu' | int) | first }}"

    - name: Find lowest MTU
      set_fact:
        lowest_mtu: "{{ hostvars[lowest_mtu_hypervisor]['node_mtu'] }}"

    - name: Write syslog file
      template:
        src: files/rsyslog-server-01-sf.conf
        dest: /etc/rsyslog.d/01-sf.conf
        owner: root
        group: sudo
        mode: u=r,g=r,o=

    - name: Restart syslog
      service:
        name: rsyslog
        enabled: yes
        state: restarted

- hosts: allsf
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: yes
  connection: ssh

  tasks:
    - name: Syslog server is the primary server
      set_fact:
        syslog: "{{hostvars[groups['primary_node'][0]]['node_mesh_ip']}}"

    - name: Send syslog to the primary server, unless I am the primary server
      template:
        src: files/rsyslog-client-01-sf.conf
        dest: /etc/rsyslog.d/01-sf.conf
        owner: root
        group: sudo
        mode: u=r,g=r,o=
      when: hostvars[groups['primary_node'][0]]['node_mesh_ip'] != node_mesh_ip

    - name: Restart syslog
      service:
        name: rsyslog
        enabled: yes
        state: restarted
      when: hostvars[groups['primary_node'][0]]['node_mesh_ip'] != node_mesh_ip

# Install etcd
- hosts: etcd
  tags: etcd
  roles:
    - role: andrewrothstein.etcd-cluster
      vars:
        etcd_secure: False
        etcd_cluster_name: shakenfist
        etcd_enable_v2: False
        etcd_master_group_name: etcd_master
        etcd_iface_public: "{{node_mesh_nic}}"
        etcd_iface_cluster: "{{node_mesh_nic}}"
        etcd_address_cluster: "{{node_mesh_ip}}"

- hosts: allsf
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: yes
  connection: ssh

  tasks:
    - name: Create storage directory
      file:
        path: /srv/shakenfist
        state: directory
        mode: "0755"

- hosts: primary_node
  any_errors_fatal: true
  become: yes
  become_method: sudo
  tags: bootstrap
  gather_facts: no
  connection: ssh

  tasks:
    - name: Create config directory
      file:
        path: /etc/sf
        state: directory
        mode: "0755"

    - name: Set system key from extra-vars
      set_fact:
        system_key: "{{admin_password}}"

    - name: Use Hashicorp Vault for "system" namespace key (if enabled)
      block:
        - set_fact:
            system_key: "{{lookup('hashivault', '{{vault_system_key_path}}', 'key')}}"
          when: vault_system_key_path is defined

      rescue:
        - fail:
            msg: "Ensure that you have installed ansible-modules-hashivault ie. pip install ansible-modules-hashivault"

    - name: Write sfrc file
      template:
        src: files/sfrc
        dest: /etc/sf/sfrc
        owner: root
        group: sudo
        mode: u=r,g=r,o=

    - name: Install sfrc for root user
      lineinfile:
        path: /root/.bashrc
        create: yes
        regexp: ". /etc/sf/sfrc"
        line: ". /etc/sf/sfrc"

    - name: Write a global auth file
      template:
        src: files/shakenfist.json
        dest: /etc/sf/shakenfist.json
        owner: root
        group: sudo
        mode: u=r,g=r,o=

- hosts: primary_node
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh

  tasks:
    - name: Install prometheus
      apt:
        name: prometheus
        state: latest

    - name: Write prometheus configuration file
      copy:
        content: |
          global:
            external_labels:
              monitor: 'shakenfist'
              origin_prometheus: {{deploy_name}}

          scrape_configs:
            - job_name: 'node'
              static_configs:
                - targets: [
                      {% for svr in groups.allsf %}
                        '{{hostvars[svr]['node_name']}}:9100',
                     {% endfor %}
                    ]
            - job_name: 'shakenfist'
              static_configs:
                - targets: [
                      {% for svr in groups.sf_prometheus_exporters %}
                        '{{hostvars[svr]['node_name']}}:13001',
                      {% endfor %}
                    ]
                # metric_relabel_configs:
                # - source_labels: [__name__]
                #   regex: '(python\w*|process_\w*)'
                #   action: drop
            - job_name: 'shakenfist_eventlog'
              static_configs:
                - targets: [
                      {% for svr in groups.eventlog_node %}
                        '{{hostvars[svr]['node_name']}}:13002',
                      {% endfor %}
                    ]
                # metric_relabel_configs:
                # - source_labels: [__name__]
                #   regex: (?i)(etcd_mvcc_db_total_size_in_bytes|etcd_network_client_grpc_received_bytes_total|etcd_network_client_grpc_sent_bytes_total|etcd_disk_wal_fsync_duration_seconds)
                #   action: keep
            - job_name: 'etcd'
              static_configs:
                - targets: [
                      {% for svr in groups.etcd_master %}
                        '{{hostvars[svr]['node_name']}}:2379',
                      {% endfor %}
                    ]
                # metric_relabel_configs:
                # - source_labels: [__name__]
                #   regex: (?i)(etcd_mvcc_db_total_size_in_bytes|etcd_network_client_grpc_received_bytes_total|etcd_network_client_grpc_sent_bytes_total|etcd_disk_wal_fsync_duration_seconds)
                #   action: keep
        dest: /etc/prometheus/prometheus.yml
        owner: root
        mode: u=rw,g=r,o=r

    - name: Restart prometheus
      service:
        name: prometheus
        enabled: yes
        state: restarted

    - name: Install Grafana prerequisites
      apt:
        name:
          - apt-transport-https
          - software-properties-common
        update_cache: yes
        state: latest

    - name: Check if grafana packages are already setup
      stat:
        path: /etc/apt/sources.list.d/packages_grafana_com_oss_deb.list
      register: stat_result

    - name: Add Grafana GPG key
      apt_key: url=https://packages.grafana.com/gpg.key
      when: not stat_result.stat.exists

    - name: Add Grafana APT repository
      apt_repository:
        repo: deb [arch=amd64] http://packages.grafana.com/oss/deb stable main
      when: not stat_result.stat.exists

    - name: Install Grafana
      apt:
        name: grafana
        update_cache: yes
        state: latest

    - name: Write grafana config
      template:
        src: files/grafana/grafana.ini
        dest: /etc/grafana/grafana.ini
        owner: root
        mode: u=rw,g=r,o=r

    - name: Write grafana dashboard
      copy:
        src: files/grafana/provisioning/dashboards/shakenfist.json
        dest: /etc/grafana/provisioning/dashboards/shakenfist.json
        owner: root
        mode: u=rw,g=r,o=r

    - name: Write grafana dashboard config
      copy:
        src: files/grafana/provisioning/dashboards/dashboards.yaml
        dest: /etc/grafana/provisioning/dashboards/dashboards.yaml
        owner: root
        mode: u=rw,g=r,o=r

    - name: Write prometheus grafana configuration file
      copy:
        content: |
          apiVersion: 1

          datasources:
          - name: Prometheus
            type: prometheus
            orgId: 1
            url: http://{{node_mesh_ip}}:9090
            isDefault: true
            version: 1
            editable: false
            access: proxy
            jsonData:
              tlsSkipVerify: true
        dest: /etc/grafana/provisioning/datasources/prometheus.yml
        owner: root
        mode: u=rwx,g=r,o=r

    - name: Restart grafana
      service:
        name: grafana-server
        enabled: yes
        state: restarted

    - name: Install apache2
      apt:
        name: apache2
        state: latest

    - name: Enable proxy modules for apache
      shell: a2enmod proxy proxy_http lbmethod_byrequests

    - name: Write apache site
      template:
        src: files/apache-site-primary.conf
        dest: /etc/apache2/sites-available/sf-example.conf
        owner: root
        group: root
        mode: u=r,g=r,o=r

    - name: Reload apache
      shell: apache2ctl graceful

- hosts: hypervisors
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh

  tasks:
    - name: Copy libvirt template
      copy:
        src: "{{hostvars['localhost']['template_path']}}/libvirt.tmpl"
        remote_src: yes
        dest: /srv/shakenfist/libvirt.tmpl
        owner: root
        group: root
        mode: "0644"

    - name: Turn off default libvirt networking
      shell: virsh net-destroy default
      ignore_errors: True

- hosts: network_node
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh

  tasks:
    - name: Copy dhcp config template
      copy:
        src: "{{hostvars['localhost']['template_path']}}/dhcp.tmpl"
        remote_src: yes
        dest: /srv/shakenfist/dhcp.tmpl
        owner: root
        group: root
        mode: "0644"

    - name: Copy dhcp hosts template
      copy:
        src: "{{hostvars['localhost']['template_path']}}/dhcphosts.tmpl"
        remote_src: yes
        dest: /srv/shakenfist/dhcphosts.tmpl
        owner: root
        group: root
        mode: "0644"

- hosts: hypervisors, network_node, etcd_master, storage, primary_node
  any_errors_fatal: true
  become: yes
  become_method: sudo
  tags: bootstrap
  gather_facts: no
  connection: ssh

  tasks:
    - name: Check if we have an existing config
      stat:
        path: /etc/sf/config
      register: config_stat_result

    - name: Log stat result for existing config
      debug:
        msg: "Existing config: {{config_stat_result}}"

    - name: Fetch config template from remote host
      fetch:
        src: "{{hostvars['localhost']['template_path']}}/config"
        dest: /tmp/{{ansible_host}}_config
        flat: yes
        fail_on_missing: yes
      when: not config_stat_result.stat.exists

    - name: Ensure /etc/sf exists
      file:
        path: /etc/sf
        state: directory
      when: not config_stat_result.stat.exists

    - name: Write config file on remote host
      template:
        src: /tmp/{{ansible_host}}_config
        dest: /etc/sf/config
        owner: root
        group: root
        mode: u=r,g=r,o=r
      when: not config_stat_result.stat.exists

    - name: Fetch systemd unit template from remote host
      fetch:
        src: "{{hostvars['localhost']['template_path']}}/sf.service"
        dest: /tmp/{{ansible_host}}_sf.service
        flat: yes
        fail_on_missing: yes

    - name: Write systemd unit on remote host
      template:
        src: /tmp/{{ansible_host}}_sf.service
        dest: /etc/systemd/system/sf.service
        owner: root
        group: root
        mode: u=r,g=r,o=r

    - name: Remove old systemd units
      file:
        dest: /lib/systemd/system/sf.service
        state: absent

    - name: Ensure /var/run/sf exists
      file:
        path: /var/run/sf
        state: directory
        owner: root
        group: root
        mode: u=rw,g=r,o=r
      when: not config_stat_result.stat.exists

- hosts: primary_node
  any_errors_fatal: true
  gather_facts: no
  connection: ssh

  tasks:
    - name: Set auth secret in etcd
      shell: |
        /srv/shakenfist/venv/bin/sf-ctl set-etcd-config \
            AUTH_SECRET_SEED "{{hostvars['localhost']['auth_secret']}}"
      environment:
        SHAKENFIST_ETCD_HOST: "{{hostvars[groups['etcd_master'][0]]['node_mesh_ip']}}"

    - name: Set ram reservation in etcd
      shell: |
        /srv/shakenfist/venv/bin/sf-ctl set-etcd-config \
            RAM_SYSTEM_RESERVATION "{{hostvars['localhost']['ram_system_reservation']}}"
      environment:
        SHAKENFIST_ETCD_HOST: "{{hostvars[groups['etcd_master'][0]]['node_mesh_ip']}}"

    - name: Set lowest_mtu in etcd
      shell: |
        /srv/shakenfist/venv/bin/sf-ctl set-etcd-config \
            MAX_HYPERVISOR_MTU "{{hostvars[groups['primary_node'][0]]['lowest_mtu']}}"
      environment:
        SHAKENFIST_ETCD_HOST: "{{hostvars[groups['etcd_master'][0]]['node_mesh_ip']}}"

    - name: Set DNS server in etcd
      shell: |
        /srv/shakenfist/venv/bin/sf-ctl set-etcd-config \
            DNS_SERVER "{{hostvars['localhost']['dns_server']}}"
      environment:
        SHAKENFIST_ETCD_HOST: "{{hostvars[groups['etcd_master'][0]]['node_mesh_ip']}}"

    - name: Set HTTP proxy in etcd
      shell: |
        /srv/shakenfist/venv/bin/sf-ctl set-etcd-config \
            HTTP_PROXY "{{hostvars['localhost']['http_proxy']}}"
      environment:
        SHAKENFIST_ETCD_HOST: "{{hostvars[groups['etcd_master'][0]]['node_mesh_ip']}}"
      when: "{{hostvars['localhost']['http_proxy']}}"

    - name: Log additional config
      debug:
        msg: "{{extra_config}}"

    - name: Apply additional config
      shell: |
        /srv/shakenfist/venv/bin/sf-ctl set-etcd-config \
            "{{item['name']}}" "{{item['value']}}"
      environment:
        SHAKENFIST_ETCD_HOST: "{{hostvars[groups['etcd_master'][0]]['node_mesh_ip']}}"
      loop: "{{extra_config}}"

    - name: Verify configuration
      shell: |
        /srv/shakenfist/venv/bin/sf-ctl verify-config
      environment:
        SHAKENFIST_ETCD_HOST: "{{hostvars[groups['etcd_master'][0]]['node_mesh_ip']}}"

    - name: Parse back etcd configuration
      shell: |
        /srv/shakenfist/venv/bin/sf-ctl show-etcd-config
      environment:
        SHAKENFIST_ETCD_HOST: "{{hostvars[groups['etcd_master'][0]]['node_mesh_ip']}}"
      register: etcd_config

    - name: Log etcd config
      debug:
        msg: "{{etcd_config.stdout}}"

- hosts: hypervisors, network_node, etcd_master, storage
  any_errors_fatal: true
  serial: 1
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh

  tasks:
    - name: Restart the SF daemon, one node at a time
      service:
        name: sf
        enabled: yes
        state: restarted
        daemon_reload: yes

- hosts: etcd_master
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh

  tasks:
    - name: Create an admin namespace called "system" with one key configured
      shell: "{{hostvars['localhost']['utility_path']}}/sf-ctl bootstrap-system-key deploy {{hostvars[groups['primary_node'][0]]['system_key']}}"
      environment:
        SHAKENFIST_ETCD_HOST: "{{hostvars[groups['etcd_master'][0]]['node_mesh_ip']}}"
        SHAKENFIST_NODE_MESH_IP: "{{hostvars[groups['etcd_master'][0]]['node_mesh_ip']}}"
        SHAKENFIST_EVENTLOG_NODE_IP: "{{hostvars[groups['eventlog_node'][0]]['node_mesh_ip']}}"
      run_once: true

- hosts: primary_node
  any_errors_fatal: true
  become: yes
  become_method: sudo
  gather_facts: no
  connection: ssh

  tasks:
    - name: Rotate logs and remove old logs
      shell: |
        journalctl --rotate
        journalctl --vacuum-time=2d
        /usr/sbin/logrotate -f /etc/logrotate.conf
      ignore_errors: True

    - name: Make /usr/share/ansible/plugins/modules
      file:
        path: /usr/share/ansible/plugins/modules
        state: directory
        mode: "0755"

    - name: Check which sf_instance module we're using
      stat:
        path: /srv/shakenfist/venv/share/shakenfist/ansible/sf_instance
      register: new_style_sf_instance

    - name: Install ansible instance module (new style)
      copy:
        src: /srv/shakenfist/venv/share/shakenfist/ansible/sf_instance
        remote_src: yes
        dest: /usr/share/ansible/plugins/modules/sf_instance
        owner: root
        group: root
        mode: "0644"
      when: new_style_sf_instance.stat.exists

    - name: Install ansible instance module (old style)
      copy:
        src: /srv/shakenfist/venv/share/shakenfist/ansible/sf_instance.py
        remote_src: yes
        dest: /usr/share/ansible/plugins/modules/sf_instance.py
        owner: root
        group: root
        mode: "0644"
      when: not new_style_sf_instance.stat.exists

    - name: Check which sf_network module we're using
      stat:
        path: /srv/shakenfist/venv/share/shakenfist/ansible/sf_network
      register: new_style_sf_network

    - name: Install ansible network module (new style)
      copy:
        src: /srv/shakenfist/venv/share/shakenfist/ansible/sf_network
        remote_src: yes
        dest: /usr/share/ansible/plugins/modules/sf_network
        owner: root
        group: root
        mode: "0644"
      when: new_style_sf_network.stat.exists

    - name: Install ansible network module (old style)
      copy:
        src: /srv/shakenfist/venv/share/shakenfist/ansible/sf_network.py
        remote_src: yes
        dest: /usr/share/ansible/plugins/modules/sf_network.py
        owner: root
        group: root
        mode: "0644"
      when: not new_style_sf_network.stat.exists

    - name: Check which sf_namespace module we're using
      stat:
        path: /srv/shakenfist/venv/share/shakenfist/ansible/sf_namespace
      register: new_style_sf_namespace

    - name: Install ansible namespace module (new style)
      copy:
        src: /srv/shakenfist/venv/share/shakenfist/ansible/sf_namespace
        remote_src: yes
        dest: /usr/share/ansible/plugins/modules/sf_namespace
        owner: root
        group: root
        mode: "0644"
      when: new_style_sf_namespace.stat.exists

    - name: Install ansible namespace module (old style)
      copy:
        src: /srv/shakenfist/venv/share/shakenfist/ansible/sf_namespace.py
        remote_src: yes
        dest: /usr/share/ansible/plugins/modules/sf_namespace.py
        owner: root
        group: root
        mode: "0644"
      when: not new_style_sf_namespace.stat.exists

    - name: Check which sf_snapshot module we're using
      stat:
        path: /srv/shakenfist/venv/share/shakenfist/ansible/sf_snapshot
      register: new_style_sf_snapshot

    - name: Install ansible snapshot module (new style)
      copy:
        src: /srv/shakenfist/venv/share/shakenfist/ansible/sf_snapshot
        remote_src: yes
        dest: /usr/share/ansible/plugins/modules/sf_snapshot
        owner: root
        group: root
        mode: "0644"
      when: new_style_sf_snapshot.stat.exists

    - name: Install ansible snapshot module (old style)
      copy:
        src: /srv/shakenfist/venv/share/shakenfist/ansible/sf_snapshot.py
        remote_src: yes
        dest: /usr/share/ansible/plugins/modules/sf_snapshot.py
        owner: root
        group: root
        mode: "0644"
      when: not new_style_sf_snapshot.stat.exists