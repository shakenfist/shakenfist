- hosts: localhost
  gather_facts: yes
  connection: ssh
  vars:
    identifier: unknown
    source_path: "/srv/github/src/shakenfist/"
    base_image: "https://sfcbr.shakenfist.com/static/ubuntu2004-ci-template.qcow2"
    base_image_user: "ubuntu"

  tasks:
    - name: Create a network for virtual network mesh traffic
      sf_network:
        netblock: "10.0.1.0/24"
        nat: False
        name: "mesh"
        namespace: "{{identifier}}"
      register: meshnetwork

    - name: Log network details
      debug:
        msg:
          - "Mesh traffic network is {{meshnetwork['meta']['uuid']}}"

    - name: Create a primary instance
      sf_instance:
        name: "primary"
        cpu: 4
        ram: 4096
        disks:
          - "100@{{base_image}}"
        networkspecs:
          - network_uuid="{{identifier}}"
          - network_uuid="{{meshnetwork['meta']['uuid']}},address=none"
        ssh_key: "{{ lookup('file', '/srv/github/id_ci.pub') }}"
        namespace: "{{identifier}}"
        state: present
      register: primary

    - name: Add primary to ansible
      add_host:
        hostname: primary
        egress_ip: "{{primary['meta']['network_interfaces'][0]['ipv4']}}"
        mesh_ip: "10.0.1.10"
        mesh_mac: "{{primary['meta']['network_interfaces'][1]['macaddr']}}"
        ansible_ssh_host: "{{primary['meta']['network_interfaces'][0]['ipv4']}}"
        ansible_ssh_extra_args: "-o StrictHostKeyChecking=no -o GlobalKnownHostsFile=/dev/null -o UserKnownHostsFile=/dev/null"
        ansible_ssh_user: "{{base_image_user}}"
        ansible_ssh_private_key_file: "/srv/github/id_ci"
        sf_uuid: "{{primary['meta']['uuid']}}"
        groups: sfall

    - name: Create sf-1
      sf_instance:
        name: "sf-1"
        cpu: 4
        ram: 12288
        disks:
          - "100@{{base_image}}"
        networkspecs:
          - network_uuid="{{identifier}}"
          - network_uuid="{{meshnetwork['meta']['uuid']}},address=none"
        ssh_key: "{{ lookup('file', '/srv/github/id_ci.pub') }}"
        namespace: "{{identifier}}"
        state: present
      register: sf1

    - name: Add sf-1 to ansible
      add_host:
        hostname: sf1
        egress_ip: "{{sf1['meta']['network_interfaces'][0]['ipv4']}}"
        mesh_ip: "10.0.1.11"
        mesh_mac: "{{sf1['meta']['network_interfaces'][1]['macaddr']}}"
        ansible_ssh_host: "{{sf1['meta']['network_interfaces'][0]['ipv4']}}"
        ansible_ssh_extra_args: "-o StrictHostKeyChecking=no -o GlobalKnownHostsFile=/dev/null -o UserKnownHostsFile=/dev/null"
        ansible_ssh_user: "{{base_image_user}}"
        ansible_ssh_private_key_file: "/srv/github/id_ci"
        sf_uuid: "{{sf1['meta']['uuid']}}"
        groups: hypervisors, sfall

    - name: Create sf-2
      sf_instance:
        name: "sf-2"
        cpu: 4
        ram: 12288
        disks:
          - "100@{{base_image}}"
        networkspecs:
          - network_uuid="{{identifier}}"
          - network_uuid="{{meshnetwork['meta']['uuid']}},address=none"
        ssh_key: "{{ lookup('file', '/srv/github/id_ci.pub') }}"
        namespace: "{{identifier}}"
        state: present
      register: sf2

    - name: Add sf-2 to ansible
      add_host:
        hostname: sf2
        egress_ip: "{{sf2['meta']['network_interfaces'][0]['ipv4']}}"
        mesh_ip: "10.0.1.12"
        mesh_mac: "{{sf2['meta']['network_interfaces'][1]['macaddr']}}"
        ansible_ssh_host: "{{sf2['meta']['network_interfaces'][0]['ipv4']}}"
        ansible_ssh_extra_args: "-o StrictHostKeyChecking=no -o GlobalKnownHostsFile=/dev/null -o UserKnownHostsFile=/dev/null"
        ansible_ssh_user: "{{base_image_user}}"
        ansible_ssh_private_key_file: "/srv/github/id_ci"
        sf_uuid: "{{sf2['meta']['uuid']}}"
        groups: hypervisors, sfall

    - name: Create sf-3
      sf_instance:
        name: "sf-3"
        cpu: 4
        ram: 12288
        disks:
          - "100@{{base_image}}"
        networkspecs:
          - network_uuid="{{identifier}}"
          - network_uuid="{{meshnetwork['meta']['uuid']}},address=none"
        ssh_key: "{{ lookup('file', '/srv/github/id_ci.pub') }}"
        namespace: "{{identifier}}"
        state: present
      register: sf3

    - name: Add sf-3 to ansible
      add_host:
        hostname: sf3
        egress_ip: "{{sf3['meta']['network_interfaces'][0]['ipv4']}}"
        mesh_ip: "10.0.1.13"
        mesh_mac: "{{sf3['meta']['network_interfaces'][1]['macaddr']}}"
        ansible_ssh_host: "{{sf3['meta']['network_interfaces'][0]['ipv4']}}"
        ansible_ssh_extra_args: "-o StrictHostKeyChecking=no -o GlobalKnownHostsFile=/dev/null -o UserKnownHostsFile=/dev/null"
        ansible_ssh_user: "{{base_image_user}}"
        ansible_ssh_private_key_file: "/srv/github/id_ci"
        sf_uuid: "{{sf3['meta']['uuid']}}"
        groups: hypervisors, sfall

    - name: Create sf-4
      sf_instance:
        name: "sf-4"
        cpu: 4
        ram: 12288
        disks:
          - "100@{{base_image}}"
        networkspecs:
          - network_uuid="{{identifier}}"
          - network_uuid="{{meshnetwork['meta']['uuid']}},address=none"
        ssh_key: "{{ lookup('file', '/srv/github/id_ci.pub') }}"
        namespace: "{{identifier}}"
        state: present
      register: sf4

    - name: Add sf-4 to ansible
      add_host:
        hostname: sf4
        egress_ip: "{{sf4['meta']['network_interfaces'][0]['ipv4']}}"
        mesh_ip: "10.0.1.14"
        mesh_mac: "{{sf4['meta']['network_interfaces'][1]['macaddr']}}"
        ansible_ssh_host: "{{sf4['meta']['network_interfaces'][0]['ipv4']}}"
        ansible_ssh_extra_args: "-o StrictHostKeyChecking=no -o GlobalKnownHostsFile=/dev/null -o UserKnownHostsFile=/dev/null"
        ansible_ssh_user: "{{base_image_user}}"
        ansible_ssh_private_key_file: "/srv/github/id_ci"
        sf_uuid: "{{sf4['meta']['uuid']}}"
        groups: hypervisors, sfall

    - name: Create sf-5
      sf_instance:
        name: "sf-5"
        cpu: 4
        ram: 12288
        disks:
          - "100@{{base_image}}"
        networkspecs:
          - network_uuid="{{identifier}}"
          - network_uuid="{{meshnetwork['meta']['uuid']}},address=none"
        ssh_key: "{{ lookup('file', '/srv/github/id_ci.pub') }}"
        namespace: "{{identifier}}"
        state: present
      register: sf5

    - name: Add sf-5 to ansible
      add_host:
        hostname: sf5
        egress_ip: "{{sf5['meta']['network_interfaces'][0]['ipv4']}}"
        mesh_ip: "10.0.1.15"
        mesh_mac: "{{sf5['meta']['network_interfaces'][1]['macaddr']}}"
        ansible_ssh_host: "{{sf5['meta']['network_interfaces'][0]['ipv4']}}"
        ansible_ssh_extra_args: "-o StrictHostKeyChecking=no -o GlobalKnownHostsFile=/dev/null -o UserKnownHostsFile=/dev/null"
        ansible_ssh_user: "{{base_image_user}}"
        ansible_ssh_private_key_file: "/srv/github/id_ci"
        sf_uuid: "{{sf5['meta']['uuid']}}"
        groups: hypervisors, sfall

    - name: Log instance details
      debug:
        msg:
          - "Primary: is {{primary['meta']['uuid']}} at {{primary['meta']['network_interfaces'][0]['ipv4']}}"
          - "   sf-1: is {{sf1['meta']['uuid']}} at {{sf1['meta']['network_interfaces'][0]['ipv4']}}"
          - "   sf-2: is {{sf2['meta']['uuid']}} at {{sf2['meta']['network_interfaces'][0]['ipv4']}}"
          - "   sf-3: is {{sf3['meta']['uuid']}} at {{sf3['meta']['network_interfaces'][0]['ipv4']}}"
          - "   sf-4: is {{sf4['meta']['uuid']}} at {{sf4['meta']['network_interfaces'][0]['ipv4']}}"
          - "   sf-5: is {{sf5['meta']['uuid']}} at {{sf5['meta']['network_interfaces'][0]['ipv4']}}"

    - include_tasks: ci-include-common-localhost.yml

- hosts: sfall
  gather_facts: yes
  become: true
  vars:
    source_path: "/srv/github/src/shakenfist/"

  tasks:
    - name: Disable logrotate
      service:
        name: logrotate
        enabled: no
        state: stopped

    - name: Disable logrotate.timer
      service:
        name: logrotate.timer
        enabled: no
        state: stopped

    - name: Use CI package cache to speed things up
      copy:
        content: |
          Acquire::http::Proxy "http://192.168.1.50:8000";
        dest: /etc/apt/apt.conf.d/00proxy
        owner: root
        group: root
        mode: u=r,g=r,o=r

    - name: Copy getsf
      copy:
        src: "{{source_path}}/shakenfist/deploy/getsf"
        dest: "/tmp/getsf"
        mode: ugo+rwx

    - name: Copy server wheel file
      copy:
        src: "{{source_path}}/shakenfist/dist/{{hostvars['localhost']['server_wheel_file']}}"
        dest: "/root/{{hostvars['localhost']['server_wheel_file']}}"

    - name: Copy client wheel file
      copy:
        src: "{{source_path}}/client-python/dist/{{hostvars['localhost']['client_wheel_file']}}"
        dest: "/root/{{hostvars['localhost']['client_wheel_file']}}"

    - name: Copy agent wheel file
      copy:
        src: "{{source_path}}/agent-python/dist/{{hostvars['localhost']['agent_wheel_file']}}"
        dest: "/root/{{hostvars['localhost']['agent_wheel_file']}}"

    # We cannot do this in the shaken fist network configuration because
    # cloud-init will randomly use the mesh interface as the default route
    # which breaks networking. So we configure this interface after cloud-init
    # has run. We also need to specify the MTU manually here because we're not
    # fetching it from dhcp any more.
    - name: Configure the mesh interface (Debian)
      copy:
        content: |
          auto eth1
          iface eth1 inet static
            mtu 8950
            address {{mesh_ip}}/24
        dest: /etc/network/interfaces.d/60-sf-mesh-net
        owner: root
        group: root
        mode: u=r,g=r,o=r
      when: ansible_distribution == 'Debian'

    # This is a bit terrible. We're doing two things here (not in order): we're
    # configuring the mesh network interface (eth1), but we're also arguing with
    # ifup / systemd networking about eth0 and whether DHCP leases should be
    # renewed. I think this is papering over a negative interaction between
    # debian and cloud-init, but I am not entirely sure what the issue is here.
    - name: Enable networking (Debian)
      shell: |
        ifup --ignore-errors eth0

        orig=$(ip -o link | grep {{mesh_mac}} | cut -f 2 -d ":")
        if [ ${orig} != "eth1" ]; then
          ip link set down ${orig}
          ip link set ${orig} name eth1
        fi

        ifup --ignore-errors eth1

        systemctl restart networking
      when: ansible_distribution == 'Debian'

    - name: Configure the mesh interface (Ubuntu)
      template:
        src: files/netplan-eth1.yaml
        dest: /etc/netplan/99-sfci.yaml
      vars:
        address: "{{mesh_ip}}/24"
        macaddr: "{{mesh_mac}}"
      when: ansible_distribution == 'Ubuntu'

    - name: Enable eth1 (Ubuntu)
      shell: netplan apply
      when: ansible_distribution == 'Ubuntu'

- hosts: primary
  gather_facts: yes
  connection: ssh
  become: true

  tasks:
    - name: Copy ssh key to primary node
      copy:
        src: /srv/github/id_ci
        dest: /root/.ssh/id_rsa
        owner: root
        group: root
        mode: u=r,g=,o=

    - name: Create a RAM disk for etcd to make it more reliable in CI
      shell: |
        mkdir -p /var/lib/etcd
        mount -t tmpfs -o rw,size=2G tmpfs /var/lib/etcd

    - name: Write a simple getsf wrapper
      copy:
        content: |
          export GETSF_FLOATING_BLOCK=192.168.230.0/24
          export GETSF_DNS_SERVER=8.8.8.8
          export GETSF_DEPLOY_NAME=bonkerslab
          export GETSF_RELEASE=local
          export GETSF_LOCAL_SOURCE=static
          export GETSF_WARNING=yes

          export GETSF_SERVER_PACKAGE="/root/{{hostvars['localhost']['server_wheel_file']}}"
          export GETSF_CLIENT_PACKAGE="/root/{{hostvars['localhost']['client_wheel_file']}}"
          export GETSF_AGENT_PACKAGE="/root/{{hostvars['localhost']['agent_wheel_file']}}"

          export GETSF_NODES="sf-primary sf-1 sf-2 sf-3 sf-4 sf-5"
          export GETSF_SSH_USER="{{base_image_user}}"
          export GETSF_SSH_KEY_FILENAME="/root/.ssh/id_rsa"
          export GETSF_NODE_PRIMARY="sf-primary"
          export GETSF_NODE_NETWORK="sf-1"
          export GETSF_NODE_EVENTLOG="sf-primary"
          export GETSF_NODE_ETCD_MASTER="sf-primary"
          export GETSF_NODE_STORAGE=""
          export GETSF_NODE_HYPERVISOR="sf-1 sf-2 sf-3 sf-4 sf-5"

          export GETSF_NODE_EGRESS_NIC_sf_primary="eth0"
          export GETSF_NODE_EGRESS_ADDRESS_sf_primary="{{hostvars['primary']['egress_ip']}}"
          export GETSF_NODE_MESH_NIC_sf_primary="eth1"
          export GETSF_NODE_MESH_ADDRESS_sf_primary="{{hostvars['primary']['mesh_ip']}}"

          export GETSF_NODE_EGRESS_NIC_sf_1="eth0"
          export GETSF_NODE_EGRESS_ADDRESS_sf_1="{{hostvars['sf1']['egress_ip']}}"
          export GETSF_NODE_MESH_NIC_sf_1="eth1"
          export GETSF_NODE_MESH_ADDRESS_sf_1="{{hostvars['sf1']['mesh_ip']}}"

          export GETSF_NODE_EGRESS_NIC_sf_2="eth0"
          export GETSF_NODE_EGRESS_ADDRESS_sf_2="{{hostvars['sf2']['egress_ip']}}"
          export GETSF_NODE_MESH_NIC_sf_2="eth1"
          export GETSF_NODE_MESH_ADDRESS_sf_2="{{hostvars['sf2']['mesh_ip']}}"

          export GETSF_NODE_EGRESS_NIC_sf_3="eth0"
          export GETSF_NODE_EGRESS_ADDRESS_sf_3="{{hostvars['sf3']['egress_ip']}}"
          export GETSF_NODE_MESH_NIC_sf_3="eth1"
          export GETSF_NODE_MESH_ADDRESS_sf_3="{{hostvars['sf3']['mesh_ip']}}"

          export GETSF_NODE_EGRESS_NIC_sf_4="eth0"
          export GETSF_NODE_EGRESS_ADDRESS_sf_4="{{hostvars['sf4']['egress_ip']}}"
          export GETSF_NODE_MESH_NIC_sf_4="eth1"
          export GETSF_NODE_MESH_ADDRESS_sf_4="{{hostvars['sf4']['mesh_ip']}}"

          export GETSF_NODE_EGRESS_NIC_sf_5="eth0"
          export GETSF_NODE_EGRESS_ADDRESS_sf_5="{{hostvars['sf5']['egress_ip']}}"
          export GETSF_NODE_MESH_NIC_sf_5="eth1"
          export GETSF_NODE_MESH_ADDRESS_sf_5="{{hostvars['sf5']['mesh_ip']}}"

          export GETSF_SKIP_COMMON_IMAGES=1

          sudo --preserve-env --set-home /tmp/getsf
        dest: "/tmp/getsf-wrapper"
        mode: ugo+rwx
